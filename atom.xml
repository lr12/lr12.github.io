<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-26T13:11:34.524Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李睿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>云取证第五周周报</title>
    <link href="http://yoursite.com/2017/06/25/%E4%BA%91%E5%8F%96%E8%AF%81%E7%AC%AC%E4%BA%94%E5%91%A8%E5%91%A8%E6%8A%A5/"/>
    <id>http://yoursite.com/2017/06/25/云取证第五周周报/</id>
    <published>2017-06-25T12:50:47.000Z</published>
    <updated>2017-06-26T13:11:34.524Z</updated>
    
    <content type="html"><![CDATA[<p>本周主要的工作有，对云取证分析的文章进行阅读。下面谈谈对这些论文的看法。</p>
<p>首先是System Log Analysis Using Google BigQuery。里面有提到通过谷歌的BigQuery在pb级别的数据，小于一分钟的响应速度。具体举了这么一个查询SELECT taskname,datacenter FROM systemlog.today WHERE severity=’warning’，扫描的数据量有100GB级别的数据量，但是查询时间仅仅需要10秒左右。BigQuery旨在分析数十亿行近似的数据，使用类SQL语法。它并不是完全符合SQL数据库的替代，并不适用于交易处理应用。BigQuery支持分析交互风格。使用SELECT命令构建查询，对于任何SQL开发者都应该很熟悉。<strong>因为我以前在做数据交换平台的时候，对于非基于lucene的全文检索的传统数据库，例如mysql查询时候，对于上百万或者上千万条甚至在上亿条数据量的查询，即使是针对索引列的查询也会很慢，更不用说数据量达到pb级别的数据量</strong>。查了下资料，总体而言，BigQuery 在大规模数据（数十亿行）上查询有很好得速度、适合快速分析大规模数据，不支持数据修改；BigQuery是OLAP系统，通过CSV格式将数据导入BigQuery，数据以弱关系型存储与云上。BigQuery 不是一个数据库系统， 1. 不支持表索引和其他关系数据库特性 2. BigQuery支持SQL得一个子集，不支持update,delete操作 3.BigQuery得join只在一张表远比另一张表小时有效（也就是不支持两张大表得join）。BigQuery 支持REST接口。</p>
<p>其次是对于Regeneration of events using system snapshots for cloud forensic analysis。 这篇论文主要讲述了在这个一种新的云攻击分析方法通过事件再生。 VNsnaps用于定期进行虚拟网络环境（VNE）的快照通过使用模糊聚类检测的云攻击技术。 然后恢复这些快照以重新生成攻击事件。首先是对于公司来说，云安全依然是在云计算里面最关心的问题。 AAA协议大致将这些尝试分为三个阶段：认证，授权和会计。云取证专注于会计，并用于分析和调查云攻击的本质，试图恢复从他们的伤害。几个输入，如日志文件和孤立的系统快照用于提取信息关于袭击。然而，这些方法只能导致一个模糊的事件视图。另外，由于网络定时协议不适用于云计算，我们是不可避免的客户和CSP的时间戳差异这使得更难于将各种实例相关联两端因此，传统技术无法明确图片的整个操作顺序的数据和涉及的过程我们的工作，通过一系列定期的快照，旨在提供具体和顺序证明所有事件对安全构成威胁数据的隐私和委托云的计算。</p>
<p>通过使用一种检测攻击的技术来解决问题正确标注其开始和结束。我们实现这个使用模糊聚类算法的“距离”概念。 VNsnap：我们使用VNsnap，一个中建立的系统来采取系统来自虚拟机外部的整个VNE的快照（VM），从而提供所有信息关于有关组件。为全球一致快照，VNsnap使用Mattern的分布式快照算法基于消息着色。另外，VM快照操作与VM的正常操作同时进行操作因此隐藏来自用户的快照延迟应用程序和减少系统停机时间（少于一个）即使在最坏的情况下）。另一个优点VNsnap是不需要任何修改在虚拟机内运行的软件，从而与之配合使用未修改的应用程序和操作系统内置快照支持。B.正确记录攻击：在我们的工作中，我们假设有足够的文档可用关于以前采取的云攻击放在各种类似的环境中。一般来说，这些记录的攻击是使用硬聚类分类的。</p>
<p>技术如分区聚类、层次聚类，这意味着每次新的攻击都被放在现有的攻击中<br>“分区”或“细分”取决于一些固定的或预定特性。，学习后云攻击的复杂性，我们发现需要考虑新攻击与全部攻击之间的相似程度现有的集合而不是完整的任务之一固定集或攻击群集。因此，我们愿意依靠将决定程度的算法每个现有集合的新实体的归属而不是将它分配给只有一个的那些预定套。由于模糊聚类是一个软聚类将一组成员级别与之联系起来的技术每个新实体，通过这样做，我们实际上考虑到整体影响所有类似的攻击，从而确保更好的准确性结果。</p>
<p>快照可以给出：<br>A. 将攻击定义为群集 关于以前的攻击的可用文档应该是 首先被组织成小型的原始操作 每个组合都可以作为个人攻击。我们对待每一个这些攻击是单点（或单对象）集群。每个点或攻击随后以n维向量来表示，每个维度代表可量化的特征，如内存使用，处理能力要求，带宽使用，复杂度等。 因此，每个攻击Xp可以被假设为具有n维度的空间向（xp1，xp2，…，xpn）。<br>B.为尺寸分配权重： 同样重要的是我们考虑到这一点 在空间中定义的每个维度的相关性。因此， 我们将一个权重wi分配给第i个维度来量化它 确定相似性（或不相似性）的重要性 两个代码之间。这个权重应该通过实验确定。例如，如果我们找到相似性的顺序 复杂度是内存相似度的两倍,那么分配到复杂度的权重将是两倍分配给内存使用的权重。<br>C.当前代码模块距离：在每个VM中，首先确定执行中的代码模块。 这些模块中的每一个基于其自身的特性再次被分配在相同的n维空间中。 但是，请注意，在这种情况下，这些代码模块是时间的函数，它们的坐标也是这样。 例如，第q个VM中的代码模块Y q（t）将具有坐标：（y q1（t），y q2（t），…，y qn（t））。 然后我们从每个集群（攻击）中计算代码模块的距离。 攻击X p和代码模块Y q（t）之间的距离为：D pq i（t）=√（Σ（wi（x pi - y qi（t）））2）… i 1到n。注意，该距离表示第t个攻击与第t个虚拟机的代码模块在时间t的不相似性。 通过为维度分配权重，我们确保了关于测量的相似程度或不相似性的推论是正确的。<br>D.阈值：我们需要确定攻击和代码模块之间的距离的阈值，在该模块之下系统可能受到损害（图2）。为此，我们从实验中找出应该保持的最小距离<br>为了使系统安全起见。这个实验涉及：<br>1.常见攻击的模拟（文档中提供）<br>2.观察其所有特征（以其坐标的形式）的量化值，如内存使用量，带宽使用量，处理能力要求等<br>3.对VM上的无数代码模块进行仿真，并将其坐标与步骤2中获得的坐标进行比较<br>4.查找代码模块和每个维度中的攻击之间的最小差异。说，无害代码模块与维度“i”的攻击之间的最小差异是mi，那么我们为所有n个维度获得以下值：m1，m2，… mn。<br>5.计算阈值：<br>阈值=√Σ（wi*mi）2 … i从1到n不等。<br>以下是通过上述步骤获得的阈值的预期特性：<br>1.阈值足够高，以确保与攻击的意外相似性一般不予以考虑。<br>2.该值足够低以确保跟踪恶意代码模块的最大概率。<br>当前代码模块与已记录攻击的比较提出的技术的有效性在很大程度上取决于阈值的正确确定。 在获得一致的阈值时，我们的方法可以证明是足够可靠的，以便最终决定代码模块的有害性。<br>接着是再生事件的产生，我们使用连续运行的计算器来测量所有VM中的代码模块与攻击集合之间的时间依赖距离（如方程式）当使用VNsnap的任何时间点的距离开始使用VNsnap在时间循环中以编程方式定期执行快照一些攻击的代码模块降低到阈值以下，当所有距离都超过阈值时停止进程，因此记录了整个攻击。<br>可以通过将系统恢复到每个快照（以编程方式再次）按照与其创建顺序相同的顺序来重新生成攻击。但是，在该再生过程之前应该采取系统的孤立快照，以便一旦重播攻击就可以将系统恢复到原来的位置.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本周主要的工作有，对云取证分析的文章进行阅读。下面谈谈对这些论文的看法。&lt;/p&gt;
&lt;p&gt;首先是System Log Analysis Using Google BigQuery。里面有提到通过谷歌的BigQuery在pb级别的数据，小于一分钟的响应速度。具体举了这么一个查询
    
    </summary>
    
    
      <category term="云取证" scheme="http://yoursite.com/tags/%E4%BA%91%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>云取证第四周周报</title>
    <link href="http://yoursite.com/2017/06/11/%E4%BA%91%E5%8F%96%E8%AF%81%E7%AC%AC%E5%9B%9B%E5%91%A8%E5%91%A8%E6%8A%A5/"/>
    <id>http://yoursite.com/2017/06/11/云取证第四周周报/</id>
    <published>2017-06-11T12:10:43.000Z</published>
    <updated>2017-06-11T12:47:26.878Z</updated>
    
    <content type="html"><![CDATA[<p>本周我主要做的工作有，将云取证收集文章看了一些，印象深刻的是Cloud application logging for forensics，即用于取证的云应用程序日志记录。这篇文章重点从日志的重要性、云的日志分析和取证相关的挑战、日志重点的记录方向以及日志的一些标准等这些方面论述。</p>
<p>首先是关于日志在云取证的重要性。日志是基于云的服务基础设施中最重要的分析数据之一。在任何时候，服务所有者和运营商都需要了解每个基础架构组件的状态，以进行故障监控，评估功能使用情况和监控业务流程。软件开发生命周期，用例按以下顺序：调试和取证、故障监控、故障排除、功能使用、绩效监测、安全/事件检测。监管和标准合规性这些用例都可以利用日志分析来完全解决或至少帮助大大加快和简化用例的解决方案。</p>
<p>基于云的日志分析和取证相关的挑战有：<strong>原木分散化、日志波动、多层和层、存档和保留、日志的可访问性、不存在日志、在日志中缺少关键信息等</strong>。不兼容/随机日志格式基于云的应用程序将日志存储在多个服务器和多个日志文件中。这些资源的易变性使日志文件只能在一段时间内可用。云应用程序堆栈中的每个层都生成日志，网络，操作系统，应用程序，数据库，网络服务等。一旦日志收集，他们需要在规定的时间内保持一段特定的时间，支持调查。我们需要向多个选区提供日志;应用程序开发人员，系统管理员，安全分析人员等。他们都需要访问，但只能访问一个子集而不是所有日志。平台即服务（PaaS）提供商通常不会将日志提供给他们的平台用户。尝试分析应用程序问题时，这可能是一个重大问题。例如，Amazon 不会使负载平衡器日志对他们的用户可用。最后，关键组件不能或不能正确地检测到生成必要的日志来回答具体问题。即使有日志可用，它们也有各种不同的格式，通常难以处理和分析。前五个挑战可以通过日志管理来解决。剩下的三个是更内在的问题，必须通过定义记录指南和标准来解决.</p>
<p>日志框架的功能列表：<strong>集中所有日志、可扩展日志存储、快速数据访问和检索、支持任何日志格式、运行数据分析作业（例如，map reduce）、保留日志记录、归档旧日志并按要求恢复、通过访问控制隔离数据访问、保存日志完整性</strong>。然而，它们并没有解决失踪和非标准化日志记录的挑战。 1例如，如果机器处于非常高的负载下，则可以启动新机器，如果不预先警告，则不再需要机器。 2请注意，在某些情况下，无法更改关于日志记录行为的任何内容，因为我们无法控制第三方应用程序的代码。 2.2日志记录如果没有为日志记录定义常见的准则或标准，会发生什么在很多情况下，应用程序开发者不会记录太多。有时候，日志记录是不完整的，如下例所示：3月16日08:09:58内核：[0.000000]普通1048576 - &gt; 1048576此日志中没有太多信息来确定实际发生了什么是正常。因此我们需要对一些操作进行日志处理以及标准化日志。</p>
<p>首先是重点记录方向：业务相关日志记录、基于操作的日志记录以及安全（取证）相关日志。云应用应该集中在以下用例：<strong>登录/注销（本地和远程）、密码更改/授权更改、资源访问失败（拒绝授权）</strong>。特权帐户执行的所有活动特权帐户，管理员或根用户都是对系统或应用程序的控制权。他们有权改变应用程序中的大部分参数。因此，对于安全目的来说，密切关注这些帐户正在做什么至关重要。</p>
<p>最后是日志的标准化.至少在日志记录中必须存在以下字段：<strong>时间戳记，应用程序，用户，会话ID，严重性，原因，分类</strong>。这些领域有助于回答问题：何时，什么，谁以及为什么。此外，它们负责提供我们的用例所规定的所有信息。需要一个时间戳来识别日志记录器记录的事件何时发生。时间戳记以标准格式记录[18]。应用程序字段标识日志条目的生成器。需要用户字段来确定哪个用户已经触发了一个活动。使用唯一的用户名或ID来区分用户彼此。 sessionID有助于跟踪跨不同应用程序和层次的单个请求。挑战是在整个组件中共享相同的ID。记录严重性以根据其重要性过滤日志。需要建立严重性系统。例如：debug，info，warn，error和crit。 sameschema应该在所有应用程序和层次中使用。通常情况下，需要找出原因来确定为什么会出现某些事情。例如，由于密码不足或密码错误，访问被拒绝。原因确定为什么。作为最后一组必填字段，类别或分类字段应该被记录。分类是通常用于在日志记录中增加信息以允许以常见方式处理类似事件的方法。这在例如报告中非常有用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本周我主要做的工作有，将云取证收集文章看了一些，印象深刻的是Cloud application logging for forensics，即用于取证的云应用程序日志记录。这篇文章重点从日志的重要性、云的日志分析和取证相关的挑战、日志重点的记录方向以及日志的一些标准等这些方
    
    </summary>
    
    
      <category term="云取证" scheme="http://yoursite.com/tags/%E4%BA%91%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>云取证第三周周报</title>
    <link href="http://yoursite.com/2017/06/04/%E4%BA%91%E5%8F%96%E8%AF%81%E7%AC%AC%E4%B8%89%E5%91%A8%E5%91%A8%E6%8A%A5/"/>
    <id>http://yoursite.com/2017/06/04/云取证第三周周报/</id>
    <published>2017-06-04T12:44:36.000Z</published>
    <updated>2017-06-13T08:07:42.693Z</updated>
    
    <content type="html"><![CDATA[<p>本周我主要做的工作有，对云取证综述文章以及一些分析文章看了一些。接下来谈谈阅读Impact of Cloud Computing on Traditional Digital Forensic Investigations 的理解。</p>
<p>文章首先提出云取证的困难在于因为多个客户的日志记录和数据可能位于同一位置，也可能分布在不断变化的主机和数据中心集合中。如果有没有合同承诺支持具体形式的调查，那么调查和发现请求可能是不可能的。数字证据本身就非常脆弱。不正确的处理或检查可能会更改，损坏或毁坏。为此，必须采取预防措施来记录，收集，保存和检查此类证据。<strong>而在这点上我的一个想法是，能不能比如根据取得的证据例如云环境日志来复现操作顺序来达到重现犯罪现场进行案情重组的过程。比如说在初始环境1，经过若干步操作，变成环境2，环境2通过逆向操作，恢复成还原环境1，在还原过程中，其实也是对云攻击过程的一个模拟复原。当然这一切的假设都是建立在该云服务的的操作是可逆的。而在还原过程中，有利于对云攻击进行分析。</strong></p>
<p>紧接着，描述一系列有关取证的一些分析手段。例如传统的取证方法允许调查人员从实验室环境的相对安全性中抓取设备并进行调查。这在数字取证领域被称为“死亡分析”。还有一些比较高端的是，调查人员可能使用的最常见的工具包括：Guidance Software [11]的EnCase，Access Data [12]的取证工具包和Helix3 [13]，这是一个开源工具包。还有很多其他的，尽管三个突出显示的是最常用的和行业接受的工具[8]。这些工具非常强大，可以查找证据价值的文物，即使嫌疑人已经删除了被认为是妥协的数据。电子发现和现场取证是数字取证学的两个不断发展的领域，调查人员可以增加他们的武器组合来打击电子犯罪。<strong>这里，我在想是不是可以通过对这几个工具进行了解一下他们的分析方法。</strong></p>
<p>接着，描述了一系列攻击，如黑客攻击，分布式拒绝服务（DDOS）攻击，网络钓鱼，制药，恶意软件，病毒，特洛伊木马，间谍软件和蠕虫的分发。分布式拒绝服务(DDoS:Distributed Denial of Service)攻击指借助于客户/服务器技术，将多个计算机联合起来作为攻击平台，对一个或多个目标发动DDoS攻击，从而成倍地提高拒绝服务攻击的威力。通常，攻击者使用一个偷窃帐号将DDoS主控程序安装在一个计算机上，在一个设定的时间主控程序将与大量代理程序通讯，代理程序已经被安装在网络上的许多计算机上。代理程序收到指令时就发动攻击。利用客户/服务器技术，主控程序能在几秒钟内激活成百上千次代理程序的运行。基于现在攻击手段如此多和复杂，云计算问题服务级别协议（SLA）必须是强大的。<strong>然而在网上搜了下，现有应对DDOS已经有比较成熟的技术和方案。</strong></p>
<p>同时看了些关于云取证的一些分析方法，印象比较深刻的是。<strong>有一个使用Hadoop进行日志分析，使用K均值算法针对大数据量进行聚类，找出离群值，IP地址统计方法。汇总日志（存储到HDFS）,先是预处理（转成固定格式），使用MR进行处理分析（分析方法通过K-Means类似的数据挖掘手段），形成可视化结果。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本周我主要做的工作有，对云取证综述文章以及一些分析文章看了一些。接下来谈谈阅读Impact of Cloud Computing on Traditional Digital Forensic Investigations 的理解。&lt;/p&gt;
&lt;p&gt;文章首先提出云取证的困难在
    
    </summary>
    
    
      <category term="云取证" scheme="http://yoursite.com/tags/%E4%BA%91%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>云取证第二周周报</title>
    <link href="http://yoursite.com/2017/05/01/%E4%BA%91%E5%8F%96%E8%AF%81%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%91%A8%E6%8A%A5/"/>
    <id>http://yoursite.com/2017/05/01/云取证第二周周报/</id>
    <published>2017-05-01T10:56:11.000Z</published>
    <updated>2017-06-11T12:48:32.497Z</updated>
    
    <content type="html"><![CDATA[<p>本周我主要做的工作有，看了几篇论文，主要还是了解现在云取证的一些情况和了解了一下docker这个新兴的技术在云计算中的应用和使用问题，印象比较深的有几篇云取证综述的论文。Cloud forensics State-of-the-art and future directions、cloud computing and digital forensics这两篇。</p>
<p>首先是Cloud forensics State-of-the-art and future directions。本论文主要讲的是在现有阶段下云取证的研究进展所面临的的挑战以及移动云取证的一些研究。首先文章开篇讲了在，美国国家标准与技术研究在“NIST云计算取证科学挑战”草案中，这致力于报告这一新兴调查领域的最新进展和最新进展。而在这里，接受率仅为15.4%。这侧面反应了这个评审的难度，也说明现在的挑战还是很大。其次是在新工具的使用上，文章只是提到了促进多节点Hadoop集群中的取证调查，但并没有进行展开讨论。以此为例引出了如果没有开发根本的新工具和能力，取证专家将面临越来越多的困难和成本。因此，今天的数字侦探不仅与罪犯进行军备竞赛，而且还与未来计算机系统的开发者进行了斗争。文章最后提到移动（云）取证是一个未被研究的主题，特别是从提供高级安全性的设备中获取数据，不仅可以用于静态数据（现在已经在所有智能移动设备中变得司空见惯），而且还通过高级加密的数据。NIST IR 8006将挑战分为九组，涉及架构，数据收集，分析，反取证，事件首次响应者，角色管理，法律话题，标准和培训等问题。我的体会是，首先这篇论文也算是我的看的入门第一篇论文，首先在现在云取证面临的挑战是非常大的，不仅在于理论研究还在于新技术的取证工具。文章最后提到的移动云取证现在还是一个比较新的主题，可以算是一个小小备选方案（但我上周和学长们简单交流了下，他们说现在移动云取证几乎该挖的坑都挖完了，所以在这边还是有分歧，有可能跟时间有问题或者跟看的问题角度有关）。</p>
<p>其次是cloud computing and digital forensics（云取证和数字取证）。这篇论文令我印象深的有这么几点：1.日志这一取证的手段。在网络入侵的情况下，受害者组织普遍存在于准备阶段，为了保护数字犯罪现场，关闭整个网络极少可行。因此，有用的证据可能不再可用，可能难以收集，也许完全不可接触，或者可能没有以法定的方式保存。例如，各种类型的日志在网络入侵调查中可能是非常有价值的，但是许多组织不会收集这些日志或不保留日志超过几天，或者不以确保其完整性的方式存储日志。这给我的体会是可以结合一个场景，将日志这个功能进行完善分析。2. 取证方法的分析，涉及哦取证技术；网络取证工具，内存取证方法和数据库取证方法。里面提到了计算机和智能手机云存储服务留下的痕迹的取证分析，是智能手机中碎片闪存页面的取证分析技术。Fasan和Olivier提出了一种重建存储在数据库中的数字证据的可靠方法（参见“数据库重建算法的正确性证明”）。这是一个重要的话题，因为更多的证据存储在数据库中，包括在云环境中，使得可以将很多证据得以保存，便于以后排查原因入侵者等因素。</p>
<p>关于Docker的研究。Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。docker的出现极大了加快了PAAS的发展，企业私有PAAS构建蓬勃发展起来。可以看到PAAS核心是解决软件代码完成后部署运行运维到监控的所有事情。基于Docker的PaaS平台现在逐渐成为主流。关于docker的安全问题有：</p>
<h5 id="1-权限及资源限制。"><a href="#1-权限及资源限制。" class="headerlink" title="1.    权限及资源限制。"></a>1.    权限及资源限制。</h5><p>限制用户运行特权及访问资源。对于多租户应用，不同的容器共享同一主机的资源和环境，普通用户权限的恶意提升将会使宿主主机完全处于被非法操控的险境，而对于用户的合法操作，大量的资源申请也会将主机推向崩溃的编译。因此，有必要对用户权限进行限定，避免根权限的赋予，进而减少主机暴露的攻击面和潜力。同时，在CPU、内存及进程数等资源方面，限定用户在单一容器中的可用配额，来防止恶意的无限资源申请给整体系统带来的破坏。<br>镜像及制作管理</p>
<h5 id="2-对容器的镜像来源进行审核。"><a href="#2-对容器的镜像来源进行审核。" class="headerlink" title="2.对容器的镜像来源进行审核。"></a>2.对容器的镜像来源进行审核。</h5><p>容器镜像制作的简化让用户可以轻而易举的创建自定义的应用镜像，但制作的应用程序千差万别，功能完整性和测试完整性参差不齐。这让用户镜像的产生面临存在众多漏洞的风险，因此需要对镜像的制作过程尽量规范化，对放置的应用程序尽量做到测试完备并符合安全标准，从源头上减少漏洞镜像的生成。而在创建容器过程中，避免使用不受信任的镜像及应用程序，采用标准及合格厂商如时速云的镜像服务mirror，从而保证容器运行时的正规及安全。</p>
<h5 id="3-日志安全审计及升级补丁"><a href="#3-日志安全审计及升级补丁" class="headerlink" title="3.日志安全审计及升级补丁"></a>3.日志安全审计及升级补丁</h5><p>对容器及系统中宿主机进行定期安全检查及漏洞补丁升级。定期针对容器及所在宿主机的网络环境进行渗透安全测试，及时发现可疑容器或危险服务端口。对主机内核及原始镜像进行定时更新，及时修补公开漏洞。在应用层次，收集及检测容器的安全日志，统计监督应用的运行过程，及时发现服务异常。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本周我主要做的工作有，看了几篇论文，主要还是了解现在云取证的一些情况和了解了一下docker这个新兴的技术在云计算中的应用和使用问题，印象比较深的有几篇云取证综述的论文。Cloud forensics State-of-the-art and future directio
    
    </summary>
    
    
      <category term="云取证" scheme="http://yoursite.com/tags/%E4%BA%91%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>云取证第一周周报</title>
    <link href="http://yoursite.com/2017/04/25/%E4%BA%91%E5%8F%96%E8%AF%81%E7%AC%AC%E4%B8%80%E5%91%A8%E5%91%A8%E6%8A%A5/"/>
    <id>http://yoursite.com/2017/04/25/云取证第一周周报/</id>
    <published>2017-04-25T02:33:03.000Z</published>
    <updated>2017-05-31T11:59:00.747Z</updated>
    
    <content type="html"><![CDATA[<p>本周我主要做的工作有，上网查询有关于云计算方面的知识点、云安全的相关知识点以及云取证的一些概念。</p>
<p>首先是对于云计算的一些见解，定义就是，云计算是基于互联网的相关服务的增加、使用和交付模式，通常涉及通过互联网来提供动态易扩展且经常是虚拟化的资源。特点是通过使计算分布在大量的分布式计算机上，而非本地计算机或远程服务器中，企业数据中心的运行将与互联网更相似。这使得企业能够将资源切换到需要的应用上，根据需求访问计算机和存储系统。从我个人角度出发，我认为云这个概念其实就是任何可以通过互联网访问的服务。而这个服务往往通过分布式计算机来协助完成。</p>
<p>然后是云计算的分类，具体是分为IaaS、PaaS、SaaS。IaaS(Infrastructure as a Service，基础架构即服务)通过互联网提供了数据中心、基础架构硬件和软件资源。IaaS可以提供服务器、操作系统、磁盘存储、数据库和/或信息资源。IaaS通常会按照”弹性云”的模式引入其他的使用和计价模式，也就是在任何一个特定的时间，都只使用你需要的服务，并且只为之付费。PaaS(Platform as a Service，平台即服务)提供了基础架构，软件开发者可以在这个基础架构之上建设新的应用，或者扩展已有的应用，同时却不必购买开发、质量控制或生产服务器。这些平台允许公司创建个性化的应用，也允许独立软件厂商或者其他的第三方机构针对垂直细分行业创造新的解决方案。SaaS(Software as a Service，软件即服务)是最为成熟、最出名，也是得到最广泛应用的一种云计算。大家可以将它理解为一种软件分布模式，在这种模式下，应用软件安装在厂商或者服务供应商那里，用户可以通过某个网络来使用这些软件，通常使用的网络是互联网。这种模式通常也被称为”随需应变”软件，这是最成熟的云计算模式，因为这种模式具有高度的灵活性、已经证明可靠的支持服务、强大的可扩展性，因此能够降低客户的维护成本和投入，而且由于这种模式的多宗旨式的基础架构，运营成本也得以降低。</p>
<p>“云安全（Cloud Security）”计划是网络时代信息安全的最新体现，它融合了并行处理、网格计算、未知病毒行为判断等新兴技术和概念，通过网状的大量客户端对网络中软件行为的异常监测，获取互联网中木马、恶意程序的最新信息，推送到Server端进行自动分析和处理，再把病毒和木马的解决方案分发到每一个客户端。常见的云安全问题有：用户身份安全问题、共享业务安全问题、用户数据安全问题。</p>
<p>术语“云取证”是指从云基础设施采集数字取证数据。例如，本地取证证据包括从日志文件、存储在磁盘上的数据、网络流量和入侵标志物等收集到的信息。本地分析与云服务分析之间的基本区别是，使用本地计算机，通过简单地进入系统，从而可以收集并分析信息。然而，当涉及到云时，机器无法进行物理访问，只有计算机的某些部分，可以通过云应用程序接口进行访问。</p>
<p>我的个人见解是，对于云取证来说，可以从两个方面进行考虑。第一个是怎么取证，也就是取证的手段，换句话说就是在取证的技术或者方式上有所改善或者突破；第二个就是对于获取到的证据如何去分析，也就是在分析证据的手段上有所改善或者突破，我觉得这块可以跟比如数据挖掘或者人工智能联系起来，例如有个论文提到的，用数据挖掘来形成聚类，找出ip的之间的关系，具体是通过kmeans的算法针对原始数据进行聚类，将所有数据划分成不同的数据集；接着在各个聚类后的数据集内部，使用 IP 地址统计方法来捕捉各个数据集特征，从而找出离群值，即可能的入侵者。又比如可以对文件简历索引，通过搜索引擎大大提高海量数据查询的效率，具体做法是集中为每个文件创建唯一标志签名， 该签名会一直跟随文件直到文件被删除， 然后借助分布式任务检测海量数据中符合签名的匹配文件 ， 从而大大提高了文件搜索的效率。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本周我主要做的工作有，上网查询有关于云计算方面的知识点、云安全的相关知识点以及云取证的一些概念。&lt;/p&gt;
&lt;p&gt;首先是对于云计算的一些见解，定义就是，云计算是基于互联网的相关服务的增加、使用和交付模式，通常涉及通过互联网来提供动态易扩展且经常是虚拟化的资源。特点是通过使计算
    
    </summary>
    
    
      <category term="云取证" scheme="http://yoursite.com/tags/%E4%BA%91%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>约瑟夫问题</title>
    <link href="http://yoursite.com/2017/04/05/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/04/05/约瑟夫问题/</id>
    <published>2017-04-05T04:46:56.000Z</published>
    <updated>2017-05-31T11:51:31.863Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题：0-1-…-n-1-这-n-个数字排成一个圈圈，从数字-0-开始每次从圆圏里删除第-m-个数字。求出这个圈圈里剩下的最后一个数字。"><a href="#问题：0-1-…-n-1-这-n-个数字排成一个圈圈，从数字-0-开始每次从圆圏里删除第-m-个数字。求出这个圈圈里剩下的最后一个数字。" class="headerlink" title="问题：0, 1, … , n-1 这 n 个数字排成一个圈圈，从数字 0 开始每次从圆圏里删除第 m 个数字。求出这个圈圈里剩下的最后一个数字。"></a>问题：0, 1, … , n-1 这 n 个数字排成一个圈圈，从数字 0 开始每次从圆圏里删除第 m 个数字。求出这个圈圈里剩下的最后一个数字。</h3><h4 id="解法一，通过一个list存储现有节点，然后记录一个删除位置变量存上一次删除的位置，经过移动变量往后m-1次即可到删除节点，然后通过list删除该节点，将删除位置变量更新"><a href="#解法一，通过一个list存储现有节点，然后记录一个删除位置变量存上一次删除的位置，经过移动变量往后m-1次即可到删除节点，然后通过list删除该节点，将删除位置变量更新" class="headerlink" title="解法一，通过一个list存储现有节点，然后记录一个删除位置变量存上一次删除的位置，经过移动变量往后m-1次即可到删除节点，然后通过list删除该节点，将删除位置变量更新"></a>解法一，通过一个list存储现有节点，然后记录一个删除位置变量存上一次删除的位置，经过移动变量往后m-1次即可到删除节点，然后通过list删除该节点，将删除位置变量更新</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public static int lastRemaining(int n, int m) &#123;</div><div class="line">    <span class="keyword">if</span> (n &lt; 1 || m &lt; 1) &#123;</div><div class="line">        <span class="built_in">return</span> -1;</div><div class="line">    &#125;</div><div class="line">    List&lt;Integer&gt; list = new LinkedList&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (int i = 0; i &lt; n; i++) &#123;</div><div class="line">        list.add(i);</div><div class="line">    &#125;</div><div class="line">    // 要删除元素的位置</div><div class="line">    int idx = 0;</div><div class="line">    // 开始计数的位置</div><div class="line">    int start = 0;</div><div class="line">    <span class="keyword">while</span> (list.size() &gt; 1) &#123;</div><div class="line">        // 只要移动m-1次就可以移动到下一个要删除的元素上</div><div class="line">        <span class="keyword">for</span> (int i = 1; i &lt; m; i++) &#123;</div><div class="line">            idx = (idx + 1) % list.size(); // 【A】</div><div class="line">        &#125;</div><div class="line">        list.remove(idx);</div><div class="line">        // 确保idx指向每一轮的第一个位置</div><div class="line">        // 下面的可以不用，【A】已经可以保证其正确性了，可以分析n=6，m=6的第一次删除情况</div><div class="line">    //  <span class="keyword">if</span> (idx == list.size()) &#123;</div><div class="line">    //      idx = 0;</div><div class="line">    //  &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> list.get(0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解法二：通过数学的思路-我们假设我们每次删除完一个数字后，剩下的数字都要进行重新编号，他们的映射关系为f-那么我们假设他的逆向映射关系为f-。首先我们知道最后一定只剩下一个数字重新编号0，所以根据倒推规律，我们只需要做n-1次逆向映射即可推出原来该位置的映射关系。接下来是我们找寻逆向映射规律。"><a href="#解法二：通过数学的思路-我们假设我们每次删除完一个数字后，剩下的数字都要进行重新编号，他们的映射关系为f-那么我们假设他的逆向映射关系为f-。首先我们知道最后一定只剩下一个数字重新编号0，所以根据倒推规律，我们只需要做n-1次逆向映射即可推出原来该位置的映射关系。接下来是我们找寻逆向映射规律。" class="headerlink" title="解法二：通过数学的思路, 我们假设我们每次删除完一个数字后，剩下的数字都要进行重新编号，他们的映射关系为f,那么我们假设他的逆向映射关系为f`。首先我们知道最后一定只剩下一个数字重新编号0，所以根据倒推规律，我们只需要做n-1次逆向映射即可推出原来该位置的映射关系。接下来是我们找寻逆向映射规律。"></a>解法二：通过数学的思路, 我们假设我们每次删除完一个数字后，剩下的数字都要进行重新编号，他们的映射关系为f,那么我们假设他的逆向映射关系为f`。首先我们知道最后一定只剩下一个数字重新编号0，所以根据倒推规律，我们只需要做n-1次逆向映射即可推出原来该位置的映射关系。接下来是我们找寻逆向映射规律。</h4><p>首先我们定义一个关于 n 和 m 的方程时，表示每次在 n 个数字 0，1， … ，n-1中每次删除第 m 个数字最后剩下的数字。</p>
<p>在这 n个数字中， 第一个被删除的数字是(m-1)%n。为了简单起见，我们把(m- 1)%n 记为 k，那么删除k之后剩下的 n-1 个数字为 0，1，… ，k-1，k+1，… ，n-1，并且下一次删除从数字 k+1 开始计数。相当于在剩下的序列中， k+1 排在最前面，从而形成 k+1，… ，n- 1，0，I，… ，k-1 。该序列最后剩下的数字也应该是关于 n 和 m 的函数。由于这个序列的规律和前面最初的序列不一样（最初的序列是从 0 开始的连续序列），因此该函数不同于前面的函数，记为 f’(n-1,m)。最初序列最后剩下的数字 f(n, m）一定是删除一个数字之后的序列最后剩下的数字，即 f(n, m)=f’(n-1, m）。</p>
<p>接下来我们把剩下的这 n-1 个数字的序列 k-1， …，n-1，0，1，… ，k-1 做一个映射，映射的结果是形成一个从 0 到 n-2 的序列：<br><img src="http://wiki.jikexueyuan.com/project/for-offer/images/63.png" alt=""> 　　<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public static int lastRemaining2(int n, int m) &#123;</div><div class="line">     <span class="keyword">if</span> (n &lt; 1 || m &lt; 1) &#123;</div><div class="line">         <span class="built_in">return</span> -1;</div><div class="line">     &#125;</div><div class="line">     int last = 0;</div><div class="line">     <span class="keyword">for</span> (int i = 2; i &lt;=n ; i++) &#123;</div><div class="line">         last = (last + m)%i;</div><div class="line">     &#125;</div><div class="line">     <span class="built_in">return</span> last;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题：0-1-…-n-1-这-n-个数字排成一个圈圈，从数字-0-开始每次从圆圏里删除第-m-个数字。求出这个圈圈里剩下的最后一个数字。&quot;&gt;&lt;a href=&quot;#问题：0-1-…-n-1-这-n-个数字排成一个圈圈，从数字-0-开始每次从圆圏里删除第-m-个数字。求
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/03/25/hello-world/"/>
    <id>http://yoursite.com/2017/03/25/hello-world/</id>
    <published>2017-03-25T02:30:03.000Z</published>
    <updated>2017-05-31T11:52:20.379Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
